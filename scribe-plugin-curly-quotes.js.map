{"version":3,"file":"scribe-plugin-curly-quotes.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA,AD2BA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA,AD0BA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA,ADkCA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA,ADkCA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA,ADyCA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5EA,AD6EA;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA,AD8DA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA,ADkCA;ACjsources":["../bower_components/lodash-amd/modern/internal/arrayCopy.js","../bower_components/lodash-amd/modern/internal/isLength.js","../bower_components/lodash-amd/modern/internal/baseValues.js","../bower_components/lodash-amd/modern/internal/baseToString.js","../bower_components/lodash-amd/modern/string/escapeRegExp.js","../bower_components/lodash-amd/modern/internal/isObjectLike.js","../bower_components/lodash-amd/modern/lang/isNative.js","../bower_components/lodash-amd/modern/lang/isObject.js","../bower_components/lodash-amd/modern/lang/isArguments.js","../bower_components/lodash-amd/modern/lang/isArray.js","../bower_components/lodash-amd/modern/internal/isIndex.js","../bower_components/lodash-amd/modern/internal/root.js","../bower_components/lodash-amd/modern/support.js","../bower_components/lodash-amd/modern/object/keysIn.js","../bower_components/lodash-amd/modern/internal/shimKeys.js","../bower_components/lodash-amd/modern/object/keys.js","../bower_components/lodash-amd/modern/object/values.js","../bower_components/lodash-amd/modern/lang/toArray.js","../src/constants.js","../src/formatters.js","../src/scribe-plugin-curly-quotes.js"],"sourcesContent":["define('lodash-amd/modern/internal/arrayCopy',[], function() {\n\n  /**\n   * Copies the values of `source` to `array`.\n   *\n   * @private\n   * @param {Array} source The array to copy values from.\n   * @param {Array} [array=[]] The array to copy values to.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayCopy(source, array) {\n    var index = -1,\n        length = source.length;\n\n    array || (array = Array(length));\n    while (++index < length) {\n      array[index] = source[index];\n    }\n    return array;\n  }\n\n  return arrayCopy;\n});\n\n","define('lodash-amd/modern/internal/isLength',[], function() {\n\n  /**\n   * Used as the maximum length of an array-like value.\n   * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n   * for more details.\n   */\n  var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This function is based on ES `ToLength`. See the\n   * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\n   * for more details.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   */\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n\n  return isLength;\n});\n\n","define('lodash-amd/modern/internal/baseValues',[], function() {\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * returned by `keysFunc`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    var index = -1,\n        length = props.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = object[props[index]];\n    }\n    return result;\n  }\n\n  return baseValues;\n});\n\n","define('lodash-amd/modern/internal/baseToString',[], function() {\n\n  /**\n   * Converts `value` to a string if it is not one. An empty string is returned\n   * for `null` or `undefined` values.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n  function baseToString(value) {\n    if (typeof value == 'string') {\n      return value;\n    }\n    return value == null ? '' : (value + '');\n  }\n\n  return baseToString;\n});\n\n","define('lodash-amd/modern/string/escapeRegExp',['../internal/baseToString'], function(baseToString) {\n\n  /**\n   * Used to match `RegExp` special characters.\n   * See this [article on `RegExp` characters](http://www.regular-expressions.info/characters.html#special)\n   * for more details.\n   */\n  var reRegExpChars = /[.*+?^${}()|[\\]\\/\\\\]/g,\n      reHasRegExpChars = RegExp(reRegExpChars.source);\n\n  /**\n   * Escapes the `RegExp` special characters \"\\\", \"^\", \"$\", \".\", \"|\", \"?\", \"*\",\n   * \"+\", \"(\", \")\", \"[\", \"]\", \"{\" and \"}\" in `string`.\n   *\n   * @static\n   * @memberOf _\n   * @category String\n   * @param {string} [string=''] The string to escape.\n   * @returns {string} Returns the escaped string.\n   * @example\n   *\n   * _.escapeRegExp('[lodash](https://lodash.com/)');\n   * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n   */\n  function escapeRegExp(string) {\n    string = baseToString(string);\n    return (string && reHasRegExpChars.test(string))\n      ? string.replace(reRegExpChars, '\\\\$&')\n      : string;\n  }\n\n  return escapeRegExp;\n});\n\n","define('lodash-amd/modern/internal/isObjectLike',[], function() {\n\n  /**\n   * Checks if `value` is object-like.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   */\n  function isObjectLike(value) {\n    return (value && typeof value == 'object') || false;\n  }\n\n  return isObjectLike;\n});\n\n","define('lodash-amd/modern/lang/isNative',['../string/escapeRegExp', '../internal/isObjectLike'], function(escapeRegExp, isObjectLike) {\n\n  /** `Object#toString` result references. */\n  var funcTag = '[object Function]';\n\n  /** Used to detect host constructors (Safari > 5). */\n  var reHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to resolve the decompiled source of functions. */\n  var fnToString = Function.prototype.toString;\n\n  /**\n   * Used to resolve the `toStringTag` of values.\n   * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)\n   * for more details.\n   */\n  var objToString = objectProto.toString;\n\n  /** Used to detect if a method is native. */\n  var reNative = RegExp('^' +\n    escapeRegExp(objToString)\n    .replace(/toString|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n  );\n\n  /**\n   * Checks if `value` is a native function.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n   * @example\n   *\n   * _.isNative(Array.prototype.push);\n   * // => true\n   *\n   * _.isNative(_);\n   * // => false\n   */\n  function isNative(value) {\n    if (value == null) {\n      return false;\n    }\n    if (objToString.call(value) == funcTag) {\n      return reNative.test(fnToString.call(value));\n    }\n    return (isObjectLike(value) && reHostCtor.test(value)) || false;\n  }\n\n  return isNative;\n});\n\n","define('lodash-amd/modern/lang/isObject',[], function() {\n\n  /**\n   * Checks if `value` is the language type of `Object`.\n   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * **Note:** See the [ES5 spec](https://es5.github.io/#x8) for more details.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(1);\n   * // => false\n   */\n  function isObject(value) {\n    // Avoid a V8 JIT bug in Chrome 19-20.\n    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n    var type = typeof value;\n    return type == 'function' || (value && type == 'object') || false;\n  }\n\n  return isObject;\n});\n\n","define('lodash-amd/modern/lang/isArguments',['../internal/isLength', '../internal/isObjectLike'], function(isLength, isObjectLike) {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]';\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /**\n   * Used to resolve the `toStringTag` of values.\n   * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)\n   * for more details.\n   */\n  var objToString = objectProto.toString;\n\n  /**\n   * Checks if `value` is classified as an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  function isArguments(value) {\n    var length = isObjectLike(value) ? value.length : undefined;\n    return (isLength(length) && objToString.call(value) == argsTag) || false;\n  }\n\n  return isArguments;\n});\n\n","define('lodash-amd/modern/lang/isArray',['../internal/isLength', './isNative', '../internal/isObjectLike'], function(isLength, isNative, isObjectLike) {\n\n  /** `Object#toString` result references. */\n  var arrayTag = '[object Array]';\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /**\n   * Used to resolve the `toStringTag` of values.\n   * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)\n   * for more details.\n   */\n  var objToString = objectProto.toString;\n\n  /* Native method references for those with the same name as other `lodash` methods. */\n  var nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray;\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(function() { return arguments; }());\n   * // => false\n   */\n  var isArray = nativeIsArray || function(value) {\n    return (isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag) || false;\n  };\n\n  return isArray;\n});\n\n","define('lodash-amd/modern/internal/isIndex',[], function() {\n\n  /**\n   * Used as the maximum length of an array-like value.\n   * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)\n   * for more details.\n   */\n  var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;\n\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n  function isIndex(value, length) {\n    value = +value;\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return value > -1 && value % 1 == 0 && value < length;\n  }\n\n  return isIndex;\n});\n\n","define('lodash-amd/modern/internal/root',[], function() {\n\n  /** Used to determine if values are of the language type `Object`. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n\n  /** Detect free variable `window`. */\n  var freeWindow = objectTypes[typeof window] && window;\n\n  /**\n   * Used as a reference to the global object.\n   *\n   * The `this` value is used if it is the global object to avoid Greasemonkey's\n   * restricted `window` object, otherwise the `window` object is used.\n   */\n  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || this;\n\n  return root;\n});\n\n","define('lodash-amd/modern/support',['./lang/isNative', './internal/root'], function(isNative, root) {\n\n  /** Used to detect functions containing a `this` reference. */\n  var reThis = /\\bthis\\b/;\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to detect DOM support. */\n  var document = (document = root.window) && document.document;\n\n  /** Native method references. */\n  var propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n  /**\n   * An object environment feature flags.\n   *\n   * @static\n   * @memberOf _\n   * @type Object\n   */\n  var support = {};\n\n  (function(x) {\n\n    /**\n     * Detect if functions can be decompiled by `Function#toString`\n     * (all but Firefox OS certified apps, older Opera mobile browsers, and\n     * the PlayStation 3; forced `false` for Windows 8 apps).\n     *\n     * @memberOf _.support\n     * @type boolean\n     */\n    support.funcDecomp = !isNative(root.WinRTError) && reThis.test(function() { return this; });\n\n    /**\n     * Detect if `Function#name` is supported (all but IE).\n     *\n     * @memberOf _.support\n     * @type boolean\n     */\n    support.funcNames = typeof Function.name == 'string';\n\n    /**\n     * Detect if the DOM is supported.\n     *\n     * @memberOf _.support\n     * @type boolean\n     */\n    try {\n      support.dom = document.createDocumentFragment().nodeType === 11;\n    } catch(e) {\n      support.dom = false;\n    }\n\n    /**\n     * Detect if `arguments` object indexes are non-enumerable.\n     *\n     * In Firefox < 4, IE < 9, PhantomJS, and Safari < 5.1 `arguments` object\n     * indexes are non-enumerable. Chrome < 25 and Node.js < 0.11.0 treat\n     * `arguments` object indexes as non-enumerable and fail `hasOwnProperty`\n     * checks for indexes that exceed their function's formal parameters with\n     * associated values of `0`.\n     *\n     * @memberOf _.support\n     * @type boolean\n     */\n    try {\n      support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);\n    } catch(e) {\n      support.nonEnumArgs = true;\n    }\n  }(0, 0));\n\n  return support;\n});\n\n","define('lodash-amd/modern/object/keysIn',['../lang/isArguments', '../lang/isArray', '../internal/isIndex', '../internal/isLength', '../lang/isObject', '../support'], function(isArguments, isArray, isIndex, isLength, isObject, support) {\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /**\n   * Creates an array of the own and inherited enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects.\n   *\n   * @static\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keysIn(new Foo);\n   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n   */\n  function keysIn(object) {\n    if (object == null) {\n      return [];\n    }\n    if (!isObject(object)) {\n      object = Object(object);\n    }\n    var length = object.length;\n    length = (length && isLength(length) &&\n      (isArray(object) || (support.nonEnumArgs && isArguments(object))) && length) || 0;\n\n    var Ctor = object.constructor,\n        index = -1,\n        isProto = typeof Ctor == 'function' && Ctor.prototype === object,\n        result = Array(length),\n        skipIndexes = length > 0;\n\n    while (++index < length) {\n      result[index] = (index + '');\n    }\n    for (var key in object) {\n      if (!(skipIndexes && isIndex(key, length)) &&\n          !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  return keysIn;\n});\n\n","define('lodash-amd/modern/internal/shimKeys',['../lang/isArguments', '../lang/isArray', './isIndex', './isLength', '../object/keysIn', '../support'], function(isArguments, isArray, isIndex, isLength, keysIn, support) {\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /**\n   * A fallback implementation of `Object.keys` which creates an array of the\n   * own enumerable property names of `object`.\n   *\n   * @private\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns the array of property names.\n   */\n  function shimKeys(object) {\n    var props = keysIn(object),\n        propsLength = props.length,\n        length = propsLength && object.length;\n\n    var allowIndexes = length && isLength(length) &&\n      (isArray(object) || (support.nonEnumArgs && isArguments(object)));\n\n    var index = -1,\n        result = [];\n\n    while (++index < propsLength) {\n      var key = props[index];\n      if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  return shimKeys;\n});\n\n","define('lodash-amd/modern/object/keys',['../internal/isLength', '../lang/isNative', '../lang/isObject', '../internal/shimKeys'], function(isLength, isNative, isObject, shimKeys) {\n\n  /* Native method references for those with the same name as other `lodash` methods. */\n  var nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys;\n\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n  var keys = !nativeKeys ? shimKeys : function(object) {\n    if (object) {\n      var Ctor = object.constructor,\n          length = object.length;\n    }\n    if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\n        (typeof object != 'function' && (length && isLength(length)))) {\n      return shimKeys(object);\n    }\n    return isObject(object) ? nativeKeys(object) : [];\n  };\n\n  return keys;\n});\n\n","define('lodash-amd/modern/object/values',['../internal/baseValues', './keys'], function(baseValues, keys) {\n\n  /**\n   * Creates an array of the own enumerable property values of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects.\n   *\n   * @static\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property values.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.values(new Foo);\n   * // => [1, 2] (iteration order is not guaranteed)\n   *\n   * _.values('hi');\n   * // => ['h', 'i']\n   */\n  function values(object) {\n    return baseValues(object, keys(object));\n  }\n\n  return values;\n});\n\n","define('lodash-amd/modern/lang/toArray',['../internal/arrayCopy', '../internal/isLength', '../object/values'], function(arrayCopy, isLength, values) {\n\n  /**\n   * Converts `value` to an array.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {Array} Returns the converted array.\n   * @example\n   *\n   * (function() {\n   *   return _.toArray(arguments).slice(1);\n   * }(1, 2, 3));\n   * // => [2, 3]\n   */\n  function toArray(value) {\n    var length = value ? value.length : 0;\n    if (!isLength(length)) {\n      return values(value);\n    }\n    if (!length) {\n      return [];\n    }\n    return arrayCopy(value);\n  }\n\n  return toArray;\n});\n\n","define('constants',[], function () {\n  return {\n    openDoubleCurly: '“',\n    closeDoubleCurly: '”',\n    openSingleCurly: '‘',\n    closeSingleCurly: '’'\n  }\n});\n\n","define('formatters',['./constants'], function (constants) {\n\n  function isWordCharacter(character) {\n      return /[^\\s()]/.test(character);\n  }\n\n  function replaceQuotesFromContext(openCurly, closeCurly) {\n    return function(m, prev) {\n      prev = prev || '';\n      var hasCharsBefore = isWordCharacter(prev);\n      // Optimistic heuristic, would need to look at DOM structure\n      // (esp block vs inline elements) for more robust inference\n      if (hasCharsBefore) {\n        return prev + closeCurly;\n      } else {\n        return prev + openCurly;\n      }\n    };\n  }\n\n  // Recursively convert the quotes to curly quotes. We have to do this\n  // recursively instead of with a global match because the latter would\n  // not detect overlaps, e.g. \"'1'\" (text can only be matched once).\n  function convert(str) {\n    if (! /['\"]/.test(str)) {\n      return str;\n    } else {\n      var foo = str.\n        // Use [\\s\\S] instead of . to match any characters _including newlines_\n        replace(/([\\s\\S])?'/,\n                replaceQuotesFromContext(constants.openSingleCurly, constants.closeSingleCurly)).\n        replace(/([\\s\\S])?\"/,\n                replaceQuotesFromContext(constants.openDoubleCurly, constants.closeDoubleCurly));\n      return convert(foo);\n    }\n  }\n\n  return {\n    convert: convert\n  }\n});\n\n","define('scribe-plugin-curly-quotes',[\n  'lodash-amd/modern/lang/toArray',\n  './constants',\n  './formatters'\n], function (\n  toArray,\n  constants,\n  formatters\n) {\n\n  'use strict';\n\n  return function () {\n\n    return function (scribe) {\n      /**\n       * Run the formatter as you type on the current paragraph.\n       *\n       * FIXME: We wouldn't have to do this if the formatters were run on text\n       * node mutations, but that's expensive unil we have a virtual DOM.\n       */\n\n      var curlyQuoteChar;\n\n      var elementHelpers = scribe.node;\n\n      // `input` doesn't tell us what key was pressed, so we grab it beforehand\n      scribe.el.addEventListener('keypress', function (event) {\n        var keys = {\n          34: '\"',\n          39: '\\''\n        };\n\n        curlyQuoteChar = keys[event.charCode];\n      });\n\n      // When the character is actually inserted, format it to transform.\n      scribe.el.addEventListener('input', function () {\n        if (curlyQuoteChar) {\n          var selection = new scribe.api.Selection();\n          var containingBlockElement = scribe.allowsBlockElements()\n            ? selection.getContaining(elementHelpers.isBlockElement)\n            : scribe.el;\n\n          selection.placeMarkers();\n          containingBlockElement.innerHTML = substituteCurlyQuotes(containingBlockElement.innerHTML);\n          selection.selectMarkers();\n          // Reset\n          curlyQuoteChar = undefined;\n        }\n      });\n\n      // Substitute quotes on setting content or paste\n      scribe.registerHTMLFormatter('normalize', substituteCurlyQuotes);\n\n      function substituteCurlyQuotes(html) {\n        // We don't want to replace quotes within the HTML markup\n        // (e.g. attributes), only to text nodes\n        var holder = document.createElement('div');\n        holder.innerHTML = html;\n\n        // Replace straight single and double quotes with curly\n        // equivalent in the given string\n        mapElements(holder, function(prev, str) {\n          // Tokenise HTML elements vs text between them\n          // Note: this is escaped HTML in the text node!\n          // Split by elements\n          // We tokenise with the previous text nodes for context, but\n          // only extract the current text node.\n          var tokens = (prev + str).split(/(<[^>]+?>(?:.*<\\/[^>]+?>)?)/);\n          return tokens\n            .map(function(token) {\n              // Only replace quotes in text between (potential) HTML elements\n              if (/^</.test(token)) {\n                return token;\n              } else {\n                return formatters.convert(token);\n              }\n            })\n            .join('')\n            .slice(prev.length);\n        });\n\n        return holder.innerHTML;\n      }\n\n      // Apply a function on all text nodes in a container, mutating in place\n      function mapElements(containerElement, func) {\n        // TODO: This heuristic breaks for elements that contain a mixture of\n        // inline and block elements.\n        var nestedBlockElements = toArray(containerElement.children).filter(elementHelpers.isBlockElement);\n        if (nestedBlockElements.length) {\n          nestedBlockElements.forEach(function (nestedBlockElement) {\n            // Map the nested block elements\n            mapElements(nestedBlockElement, func);\n          });\n        } else {\n          mapTextNodes(containerElement, func);\n        }\n      }\n\n      function mapTextNodes(containerElement, func) {\n        // TODO: Only walk inside of text nodes within inline elements\n        var walker = document.createTreeWalker(containerElement, NodeFilter.SHOW_TEXT);\n        var node = walker.firstChild();\n        var prevTextNodes = '';\n        while (node) {\n          // Split by BR\n          if (node.previousSibling && node.previousSibling.nodeName === 'BR') {\n            prevTextNodes = '';\n          }\n          node.data = func(prevTextNodes, node.data);\n          prevTextNodes += node.data;\n          node = walker.nextSibling();\n        }\n      }\n\n    };\n  };\n\n});\n\n"],"names":[]}