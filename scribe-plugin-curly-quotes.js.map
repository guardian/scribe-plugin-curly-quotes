{"version":3,"file":"scribe-plugin-curly-quotes.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA,ADwCA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA,ADyCA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA,ADyCA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA,ADsCA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjsources":["../bower_components/lodash-amd/modern/objects/isString.js","../bower_components/lodash-amd/modern/internals/slice.js","../bower_components/lodash-amd/modern/internals/isNative.js","../bower_components/lodash-amd/modern/internals/objectTypes.js","../bower_components/lodash-amd/modern/objects/isObject.js","../bower_components/lodash-amd/modern/internals/shimKeys.js","../bower_components/lodash-amd/modern/objects/keys.js","../bower_components/lodash-amd/modern/objects/values.js","../bower_components/lodash-amd/modern/collections/toArray.js","../src/scribe-plugin-curly-quotes.js"],"sourcesContent":["/**\n * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>\n * Build: `lodash modularize modern exports=\"amd\" -o ./modern/`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\ndefine('lodash-amd/modern/objects/isString',[], function() {\n\n  /** `Object#toString` result shortcuts */\n  var stringClass = '[object String]';\n\n  /** Used for native method references */\n  var objectProto = Object.prototype;\n\n  /** Used to resolve the internal [[Class]] of values */\n  var toString = objectProto.toString;\n\n  /**\n   * Checks if `value` is a string.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if the `value` is a string, else `false`.\n   * @example\n   *\n   * _.isString('fred');\n   * // => true\n   */\n  function isString(value) {\n    return typeof value == 'string' ||\n      value && typeof value == 'object' && toString.call(value) == stringClass || false;\n  }\n\n  return isString;\n});\n\n","/**\n * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>\n * Build: `lodash modularize modern exports=\"amd\" -o ./modern/`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\ndefine('lodash-amd/modern/internals/slice',[], function() {\n\n  /**\n   * Slices the `collection` from the `start` index up to, but not including,\n   * the `end` index.\n   *\n   * Note: This function is used instead of `Array#slice` to support node lists\n   * in IE < 9 and to ensure dense arrays are returned.\n   *\n   * @private\n   * @param {Array|Object|string} collection The collection to slice.\n   * @param {number} start The start index.\n   * @param {number} end The end index.\n   * @returns {Array} Returns the new array.\n   */\n  function slice(array, start, end) {\n    start || (start = 0);\n    if (typeof end == 'undefined') {\n      end = array ? array.length : 0;\n    }\n    var index = -1,\n        length = end - start || 0,\n        result = Array(length < 0 ? 0 : length);\n\n    while (++index < length) {\n      result[index] = array[start + index];\n    }\n    return result;\n  }\n\n  return slice;\n});\n\n","/**\n * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>\n * Build: `lodash modularize modern exports=\"amd\" -o ./modern/`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\ndefine('lodash-amd/modern/internals/isNative',[], function() {\n\n  /** Used for native method references */\n  var objectProto = Object.prototype;\n\n  /** Used to resolve the internal [[Class]] of values */\n  var toString = objectProto.toString;\n\n  /** Used to detect if a method is native */\n  var reNative = RegExp('^' +\n    String(toString)\n      .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n      .replace(/toString| for [^\\]]+/g, '.*?') + '$'\n  );\n\n  /**\n   * Checks if `value` is a native function.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.\n   */\n  function isNative(value) {\n    return typeof value == 'function' && reNative.test(value);\n  }\n\n  return isNative;\n});\n\n","/**\n * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>\n * Build: `lodash modularize modern exports=\"amd\" -o ./modern/`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\ndefine('lodash-amd/modern/internals/objectTypes',[], function() {\n\n  /** Used to determine if values are of the language type Object */\n  var objectTypes = {\n    'boolean': false,\n    'function': true,\n    'object': true,\n    'number': false,\n    'string': false,\n    'undefined': false\n  };\n\n  return objectTypes;\n});\n\n","/**\n * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>\n * Build: `lodash modularize modern exports=\"amd\" -o ./modern/`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\ndefine('lodash-amd/modern/objects/isObject',['../internals/objectTypes'], function(objectTypes) {\n\n  /**\n   * Checks if `value` is the language type of Object.\n   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if the `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(1);\n   * // => false\n   */\n  function isObject(value) {\n    // check if the value is the ECMAScript language type of Object\n    // http://es5.github.io/#x8\n    // and avoid a V8 bug\n    // http://code.google.com/p/v8/issues/detail?id=2291\n    return !!(value && objectTypes[typeof value]);\n  }\n\n  return isObject;\n});\n\n","/**\n * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>\n * Build: `lodash modularize modern exports=\"amd\" -o ./modern/`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\ndefine('lodash-amd/modern/internals/shimKeys',['./objectTypes'], function(objectTypes) {\n\n  /** Used for native method references */\n  var objectProto = Object.prototype;\n\n  /** Native method shortcuts */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /**\n   * A fallback implementation of `Object.keys` which produces an array of the\n   * given object's own enumerable property names.\n   *\n   * @private\n   * @type Function\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns an array of property names.\n   */\n  var shimKeys = function(object) {\n    var index, iterable = object, result = [];\n    if (!iterable) return result;\n    if (!(objectTypes[typeof object])) return result;\n      for (index in iterable) {\n        if (hasOwnProperty.call(iterable, index)) {\n          result.push(index);\n        }\n      }\n    return result\n  };\n\n  return shimKeys;\n});\n\n","/**\n * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>\n * Build: `lodash modularize modern exports=\"amd\" -o ./modern/`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\ndefine('lodash-amd/modern/objects/keys',['../internals/isNative', './isObject', '../internals/shimKeys'], function(isNative, isObject, shimKeys) {\n\n  /* Native method shortcuts for methods with the same name as other `lodash` methods */\n  var nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys;\n\n  /**\n   * Creates an array composed of the own enumerable property names of an object.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns an array of property names.\n   * @example\n   *\n   * _.keys({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)\n   */\n  var keys = !nativeKeys ? shimKeys : function(object) {\n    if (!isObject(object)) {\n      return [];\n    }\n    return nativeKeys(object);\n  };\n\n  return keys;\n});\n\n","/**\n * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>\n * Build: `lodash modularize modern exports=\"amd\" -o ./modern/`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\ndefine('lodash-amd/modern/objects/values',['./keys'], function(keys) {\n\n  /**\n   * Creates an array composed of the own enumerable property values of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns an array of property values.\n   * @example\n   *\n   * _.values({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => [1, 2, 3] (property order is not guaranteed across environments)\n   */\n  function values(object) {\n    var index = -1,\n        props = keys(object),\n        length = props.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = object[props[index]];\n    }\n    return result;\n  }\n\n  return values;\n});\n\n","/**\n * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>\n * Build: `lodash modularize modern exports=\"amd\" -o ./modern/`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\ndefine('lodash-amd/modern/collections/toArray',['../objects/isString', '../internals/slice', '../objects/values'], function(isString, slice, values) {\n\n  /**\n   * Converts the `collection` to an array.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|string} collection The collection to convert.\n   * @returns {Array} Returns the new converted array.\n   * @example\n   *\n   * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n   * // => [2, 3, 4]\n   */\n  function toArray(collection) {\n    if (collection && typeof collection.length == 'number') {\n      return slice(collection);\n    }\n    return values(collection);\n  }\n\n  return toArray;\n});\n\n","define('scribe-plugin-curly-quotes',[\n  'lodash-amd/modern/collections/toArray'\n], function (\n  toArray\n) {\n\n  'use strict';\n\n  return function () {\n\n    var openDoubleCurly = '“';\n    var closeDoubleCurly = '”';\n\n    var openSingleCurly = '‘';\n    var closeSingleCurly = '’';\n\n    var NON_BREAKING_SPACE = '\\u00A0';\n\n    return function (scribe) {\n      /**\n       * Run the formatter as you type on the current paragraph.\n       *\n       * FIXME: We wouldn't have to do this if the formatters were run on text\n       * node mutations, but that's expensive unil we have a virtual DOM.\n       */\n\n      var keys = {\n        34: '\"',\n        39: '\\''\n      };\n      var curlyQuoteChar;\n\n      var elementHelpers = scribe.element;\n\n      // `input` doesn't tell us what key was pressed, so we grab it beforehand\n      scribe.el.addEventListener('keypress', function (event) {\n        curlyQuoteChar = keys[event.charCode];\n      });\n\n      // When the character is actually inserted, format it to transform.\n      scribe.el.addEventListener('input', function () {\n        if (curlyQuoteChar) {\n          var selection = new scribe.api.Selection();\n          var containingBlockElement = scribe.allowsBlockElements()\n            ? selection.getContaining(elementHelpers.isBlockElement)\n            : scribe.el;\n\n          selection.placeMarkers();\n          containingBlockElement.innerHTML = substituteCurlyQuotes(containingBlockElement.innerHTML);\n          selection.selectMarkers();\n          // Reset\n          curlyQuoteChar = undefined;\n        }\n      });\n\n      // Substitute quotes on setting content or paste\n      scribe.registerHTMLFormatter('normalize', substituteCurlyQuotes);\n\n      function isWordCharacter(character) {\n          return /[^\\s()]/.test(character);\n      }\n\n      function substituteCurlyQuotes(html) {\n        // We don't want to replace quotes within the HTML markup\n        // (e.g. attributes), only to text nodes\n        var holder = document.createElement('div');\n        holder.innerHTML = html;\n\n        // Replace straight single and double quotes with curly\n        // equivalent in the given string\n        mapElements(holder, function(prev, str) {\n          // Tokenise HTML elements vs text between them\n          // Note: this is escaped HTML in the text node!\n          // Split by elements\n          // We tokenise with the previous text nodes for context, but\n          // only extract the current text node.\n          var tokens = (prev + str).split(/(<[^>]+?>(?:.*<\\/[^>]+?>)?)/);\n          return tokens\n            .map(function(token) {\n              // Only replace quotes in text between (potential) HTML elements\n              if (/^</.test(token)) {\n                return token;\n              } else {\n                return convert(token);\n              }\n            })\n            .join('')\n            .slice(prev.length);\n        });\n\n        return holder.innerHTML;\n      }\n\n      // Recursively convert the quotes to curly quotes. We have to do this\n      // recursively instead of with a global match because the latter would\n      // not detect overlaps, e.g. \"'1'\" (text can only be matched once).\n      function convert(str) {\n        if (! /['\"]/.test(str)) {\n          return str;\n        } else {\n          var foo = str.\n            // Use [\\s\\S] instead of . to match any characters _including newlines_\n            replace(/([\\s\\S])?'/,\n                    replaceQuotesFromContext(openSingleCurly, closeSingleCurly)).\n            replace(/([\\s\\S])?\"/,\n                    replaceQuotesFromContext(openDoubleCurly, closeDoubleCurly));\n          return convert(foo);\n        }\n      }\n\n      function replaceQuotesFromContext(openCurly, closeCurly) {\n        return function(m, prev) {\n          prev = prev || '';\n          var hasCharsBefore = isWordCharacter(prev);\n          // Optimistic heuristic, would need to look at DOM structure\n          // (esp block vs inline elements) for more robust inference\n          if (hasCharsBefore) {\n            return prev + closeCurly;\n          } else {\n            return prev + openCurly;\n          }\n        };\n      }\n\n      // Apply a function on all text nodes in a container, mutating in place\n      function mapElements(containerElement, func) {\n        // TODO: This heuristic breaks for elements that contain a mixture of\n        // inline and block elements.\n        var nestedBlockElements = toArray(containerElement.children).filter(elementHelpers.isBlockElement);\n        if (nestedBlockElements.length) {\n          nestedBlockElements.forEach(function (nestedBlockElement) {\n            // Map the nested block elements\n            mapElements(nestedBlockElement, func);\n          });\n        } else {\n          mapTextNodes(containerElement, func);\n        }\n      }\n\n      function mapTextNodes(containerElement, func) {\n        // TODO: Only walk inside of text nodes within inline elements\n        var walker = document.createTreeWalker(containerElement, NodeFilter.SHOW_TEXT);\n        var node = walker.firstChild();\n        var prevTextNodes = '';\n        while (node) {\n          // Split by BR\n          if (node.previousSibling && node.previousSibling.nodeName === 'BR') {\n            prevTextNodes = '';\n          }\n          node.data = func(prevTextNodes, node.data);\n          prevTextNodes += node.data;\n          node = walker.nextSibling();\n        }\n      }\n\n    };\n  };\n\n});\n\n"],"names":[]}